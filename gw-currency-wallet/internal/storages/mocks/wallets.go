// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/latimeri-compute/go-exam-exchanger/gw-currency-wallet/internal/storages (interfaces: WalletModelInterface)
//
// Generated by this command:
//
//	mockgen -destination=mocks/wallets.go . WalletModelInterface
//

// Package mock_storages is a generated GoMock package.
package mock_storages

import (
	reflect "reflect"

	storages "github.com/latimeri-compute/go-exam-exchanger/gw-currency-wallet/internal/storages"
	gomock "go.uber.org/mock/gomock"
)

// MockWalletModelInterface is a mock of WalletModelInterface interface.
type MockWalletModelInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWalletModelInterfaceMockRecorder
	isgomock struct{}
}

// MockWalletModelInterfaceMockRecorder is the mock recorder for MockWalletModelInterface.
type MockWalletModelInterfaceMockRecorder struct {
	mock *MockWalletModelInterface
}

// NewMockWalletModelInterface creates a new mock instance.
func NewMockWalletModelInterface(ctrl *gomock.Controller) *MockWalletModelInterface {
	mock := &MockWalletModelInterface{ctrl: ctrl}
	mock.recorder = &MockWalletModelInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletModelInterface) EXPECT() *MockWalletModelInterfaceMockRecorder {
	return m.recorder
}

// ChangeBalance mocks base method.
func (m *MockWalletModelInterface) ChangeBalance(id uint, amount int, currency string) (storages.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeBalance", id, amount, currency)
	ret0, _ := ret[0].(storages.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeBalance indicates an expected call of ChangeBalance.
func (mr *MockWalletModelInterfaceMockRecorder) ChangeBalance(id, amount, currency any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeBalance", reflect.TypeOf((*MockWalletModelInterface)(nil).ChangeBalance), id, amount, currency)
}

// ExchangeBetweenCurrency mocks base method.
func (m *MockWalletModelInterface) ExchangeBetweenCurrency(id uint, amount, rate int, fromCurrency, toCurrency string) (storages.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeBetweenCurrency", id, amount, rate, fromCurrency, toCurrency)
	ret0, _ := ret[0].(storages.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExchangeBetweenCurrency indicates an expected call of ExchangeBetweenCurrency.
func (mr *MockWalletModelInterfaceMockRecorder) ExchangeBetweenCurrency(id, amount, rate, fromCurrency, toCurrency any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeBetweenCurrency", reflect.TypeOf((*MockWalletModelInterface)(nil).ExchangeBetweenCurrency), id, amount, rate, fromCurrency, toCurrency)
}

// GetBalance mocks base method.
func (m *MockWalletModelInterface) GetBalance(id uint) (storages.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", id)
	ret0, _ := ret[0].(storages.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockWalletModelInterfaceMockRecorder) GetBalance(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockWalletModelInterface)(nil).GetBalance), id)
}
